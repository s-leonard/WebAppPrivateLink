variables:
    apiappservicename: 'ENTERAPPSERIVCENAME'

trigger:
  - master
  
stages:
- stage: 'BuildAPI'
  displayName: 'Build API'
  variables:
    solution: '**/DemoAPI.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  jobs:
  - job: Build
    pool:
        vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/DemoAPI.sln'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/DemoAPI.csproj'
        arguments: '--configuration Release' # Update this to match your need

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
      
     # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'apiartifact'


- stage: 'Deploy'
  displayName: 'Deploy to App Service'
  jobs:
  - job: Deploy_to_app_service
    pool:
        vmImage: 'windows-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'apiartifact'
        targetPath: '$(Pipeline.Workspace)'

    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'AzureServiceConnection'
        appType: 'webApp'
        WebAppName: '$(apiappservicename)'
        packageForLinux: '$(Pipeline.Workspace)/**/*.zip'